"""
Django settings for wildevents project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from django.core.exceptions import ImproperlyConfigured
from os import environ, path
from logging import getLogger, INFO, DEBUG, basicConfig
from dotenv import load_dotenv


def get_env_variable(var_name, default=None, cast_type=str):
    """Get the environment variable or return exception"""
    try:
        value = environ[var_name]
        if cast_type is not None:
            if cast_type == bool:
                value = value.lower() in ["true", "1", "t"]
            else:
                value = cast_type(value)
    except KeyError:
        if default is not None:
            value = default
        else:
            error_msg = f"Set the {var_name} environment variable"
            raise ImproperlyConfigured(error_msg)
    return value


# Load environment variables from .env file
if get_env_variable("DEV", False, bool):
    dotenv_path = path.join(path.dirname(__file__), "..", ".env")
    print(f"Checking for env: {dotenv_path}")
    if path.exists(dotenv_path):
        print("Loading env")
        load_dotenv(dotenv_path)

# Fetch all the environment variables
env_debug = get_env_variable("DJANGO_DEBUG", False, bool)
logging_level = get_env_variable("DJANGO_LOGGING_LEVEL", "info", str).lower()
web_port = get_env_variable("DJANGO_HOST_PORT", 8000, int)

# Logging verbosity
if logging_level.lower() == "debug":
    basicConfig(level=DEBUG)
else:
    basicConfig(level=INFO)

logger = getLogger(__name__)
logger.info(f"Logging level: {logging_level}")
logger.info(f"Django is using DEBUG = {env_debug}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


db_name = get_env_variable("DJANGO_DB_NAME", "mydatabase")
db_user = get_env_variable("DJANGO_DB_USER", "myuser")
db_pass = get_env_variable("DJANGO_DB_PASSWORD", "mypassword")
db_host = get_env_variable("DJANGO_DB_HOST", "db")
db_port = get_env_variable("DJANGO_DB_PORT", "3306")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-86=2u1d^+_iqm^$4-2yzfh*a0+(mo#0c=eet3%8d89h2y6v&j&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "events",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Allow React dev server access
]

ROOT_URLCONF = "wildevents.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wildevents.wsgi.application"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": db_name,
        "USER": db_user,
        "PASSWORD": db_pass,
        "HOST": db_host,
        "PORT": db_port,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
